#!/bin/bash

PROJECT_NAME=libkamoflage
PROJECT_NAMESPACE=com.toolkits.kamoflage

function usage {
    echo
    echo "Configure script for $PROJECT_NAME"
    echo
    echo "usage:"
    echo
    echo "$0 -h"
    echo "         : prints this help text"
    echo "$0 --help"
    echo "         : prints this help text"
    echo "$0 --ndk-path <path> --sdk-path <path> --libsvgandroid-path <path> --target-platform <android target platform>"
    echo "         : create a Makefile"
    echo
    echo
}

function findsmallest {
    local REQUESTED=`echo $TARGET_PLATFORM | cut -d '-' -f 2-`
    local LIST=`ls $NDK_PATH/platforms/ | cut -d '-' -f 2- | sort`
    local RESULT=0

    for PLF in $LIST ; do
	if [ $PLF -lt $REQUESTED ]; then
	    local RESULT=$PLF
	fi
    done

    echo "android-$RESULT"
}

function do_init {
    mkdir -p android/build
    rm -rf android/build/*
    pushd android/build

    PATH=$PATH:$SDK_PATH/tools
    PATH=$PATH:$SDK_PATH/platform-tools

    android create lib-project --name $PROJECT_NAME --target $TARGET_PLATFORM --path ./ --package $PROJECT_NAMESPACE

    ln -s $LIBSVGANDROID_PATH/export/libsvgandroid.jar libs/
    if [ ! -L ../libsvgandroid ]; then
	ln -s $LIBSVGANDROID_PATH/ ../libsvgandroid
    fi

    rmdir src
    ln -s ../src_jar ./src
    ln -s ../src_jni ./jni

    cat <<EOF > Makefile
# Autogenerated Makefile

PATH := \$(PATH):$SDK_PATH/tools
PATH := \$(PATH):$SDK_PATH/platform-tools

clean:
	rm -rf bin/*
	rm -rf obj/*
	rm -rf libs/arm*

ndkbuild:
	$NDK_PATH/ndk-build TARGET_PLATFORM=$NDK_PLATFORM

release: ndkbuild
	ant release

debug: ndkbuild
	ant debug

EOF

    popd

    cat <<EOF > Makefile
# Autogenerated Makefile

BUILDDIR = android/build

help:
	@echo "Usage:"
	@echo
	@echo "make <target>"
	@echo
	@echo "Available targets:"
	@echo
	@echo "    help    : this text"
	@echo "    release : make a release build"
	@echo "    debug   : make a debug build"
	@echo "    clean   : cleanup build"

clean:
	cd \$(BUILDDIR); \$(MAKE) clean
	rm -rf export

releasebuild:
	cd \$(BUILDDIR); \$(MAKE) release
	@touch \$(BUILDDIR)/bin/classes.jar

debugbuild:
	cd \$(BUILDDIR); \$(MAKE) debug
	@touch \$(BUILDDIR)/bin/classes.jar

export: \$(BUILDDIR)/bin/classes.jar
	@printf "\\n\\nExporting to ./export\\n\\n"
	@mkdir -p export
	@rm -rf export/*
	@cp \$(BUILDDIR)/bin/classes.jar export/$PROJECT_NAME.jar
	@find \$(BUILDDIR)/libs/ | grep \.so | cut -d / -f 4- | awk '{print "install -D \$(BUILDDIR)/libs/" \$\$0 " export/" \$\$0}' | bash

release: releasebuild export
	@echo "releasebuild FINISHED"

debug: debugbuild export
	@echo "debugbuild FINISHED"

EOF
}

if [ "$1" = "-h" ]; then
    echo "Help:"
    usage
    exit 0
fi

if [ "$1" = "--help" ]; then
    echo "Help:"
    usage
    exit 0
fi

if [ "$#" -lt 8 ]; then
    echo "Wrong number of arguments"
    usage
    exit 1
fi

if [ "$1" != "--ndk-path" ]; then
    echo "Wrong first argument."
    usage
    exit 1
fi

if [ "$3" != "--sdk-path" ]; then
    echo "Wrong third argument."
    usage
    exit 1
fi

if [ "$5" != "--libsvgandroid-path" ]; then
    echo "Wrong fifth argument."
    usage
    exit 1
fi

if [ "$7" != "--target-platform" ]; then
    echo "Wrong seventh argument."
    usage
    exit 1
fi

NDK_PATH=$2
SDK_PATH=$4
LIBSVGANDROID_PATH=$6
TARGET_PLATFORM=$8

NDK_PLATFORM=$(findsmallest $TARGET_PLATFORM)
echo "Found nearest compatible NDK platform $NDK_PLATFORM (requested: $TARGET_PLATFORM)"

do_init

echo
